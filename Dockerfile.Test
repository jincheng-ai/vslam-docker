FROM nvidia/cudagl:10.2-devel-ubuntu18.04
MAINTAINER jincheng <jincheng.jcs@gmail.com>

# Set apt
RUN apt-get update -q && \
    apt-get upgrade -yq
RUN apt-get install -yq locales wget curl sudo cmake git build-essential vim lsb-release bash-completion clang-format \
    pkg-config yasm software-properties-common && \
    locale-gen en_US.UTF-8

ARG DEBIAN_FRONTEND=noninteractive
ENV TZ=Asia/Shanghai
RUN apt-get install -yq tzdata

ENV USER_NAME=ubuntu

RUN useradd -m -d /home/${USER_NAME} ${USER_NAME} -p `perl -e 'print crypt("${USER_NAME}", "salt"),"\n"'` && \
    echo "${USER_NAME} ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
USER ${USER_NAME}
WORKDIR /home/${USER_NAME}
ENV HOME=/home/${USER_NAME}

ENV CERES_VERSION="1.14.0"
ENV OPENCV_VERSION="4.5.3"
ENV JOBS_NUM="4"
ENV  CUDA_ARCH_BIN="7.2"
ENV ROS_DISTRO="melodic"

ENV LANG=en_US.UTF-8 LANGUAGE=en_US:en LC_ALL=en_US.UTF-8

ARG HTTP_PROXY="http://10.1.80.160:7890"
ARG HTTPS_PROXY="http://10.1.80.160:7890"

RUN sudo apt-get remove -y x264 libx264-dev
RUN sudo apt-get install -yq \
    # for cuda
    libcudnn7 libcudnn7-dev   

RUN sudo apt-get install -yq \ 
    # for SLAM Developer
    libboost-all-dev  libgoogle-glog-dev libeigen3-dev libsuitesparse-dev libgl1-mesa-dev libglew-dev libxkbcommon-x11-dev

RUN sudo apt-get install -yq \
    # for OpenGL
    libgl1-mesa-dev libglu1-mesa-dev freeglut3-dev libxi-dev

RUN sudo apt-get install -yq \
    # for OpenCV
    checkinstall gfortran libjpeg8-dev libtiff5-dev libavcodec-dev libavformat-dev \
    libswscale-dev libdc1394-22-dev libxine2-dev libv4l-dev \
    qt5-default libgtk2.0-dev libtbb-dev libatlas-base-dev \
    libfaac-dev libmp3lame-dev libtheora-dev libvorbis-dev libxvidcore-dev libopencore-amrnb-dev \
    libopencore-amrwb-dev x264 v4l-utils libprotobuf-dev protobuf-compiler libgoogle-glog-dev \
    libgflags-dev libgphoto2-dev libeigen3-dev libhdf5-dev doxygen \
    python-dev python-pip python3-dev python3-pip \
    # for ffmpeg
    ffmpeg

RUN sudo apt-get install -yq \
    libvtk6.3-qt libvtk6.3 libvtk6-qt-dev
RUN sudo rm -rf /var/lib/apt/lists/*

# Get OpenCV dependencies
RUN pip2 install -U pip numpy -i https://opentuna.cn/pypi/web/simple &&\
    pip3 install -U pip numpy -i https://opentuna.cn/pypi/web/simple &&\
    pip install numpy scipy matplotlib scikit-image scikit-learn ipython -i https://opentuna.cn/pypi/web/simple

# Fetch OpenCV
RUN mkdir ~/opt
RUN cd ~/opt && git clone https://github.com/opencv/opencv.git
RUN cd ~/opt/opencv && git checkout ${OPENCV_VERSION}

RUN cd ~/opt && git clone https://github.com/opencv/opencv_contrib.git
RUN cd ~/opt/opencv_contrib && git checkout ${OPENCV_VERSION}

RUN cd ~/opt/opencv && mkdir release && cd release && \
    cmake -G "Unix Makefiles" -DENABLE_PRECOMPILED_HEADERS=OFF -DCMAKE_CXX_COMPILER=/usr/bin/g++ \
    CMAKE_C_COMPILER=/usr/bin/gcc -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/usr/local \
    -DWITH_TBB=ON -DBUILD_NEW_PYTHON_SUPPORT=ON -DWITH_V4L=ON -DINSTALL_C_EXAMPLES=ON \
    -DINSTALL_PYTHON_EXAMPLES=ON -DBUILD_EXAMPLES=ON -DWITH_OPENGL=ON \
    -DWITH_FFMPEG=ON \
    -DWITH_QT=ON  \
    -DWITH_CUDA=ON -DWITH_CUDNN=ON -DCUDA_ARCH_BIN=${CUDA_ARCH_BIN} -DOPENCV_DNN_CUDA=ON -DCUDA_GENERATION=Auto \
    -DOPENCV_GENERATE_PKGCONFIG=ON \
    -DOPENCV_EXTRA_MODULES_PATH=~/opt/opencv_contrib/modules \
    .. 
RUN make -j"$(nproc)"
RUN sudo make install && \
    ldconfig &&\
    cd ~/opt/opencv/release && make clean
